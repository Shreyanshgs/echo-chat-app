{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/shreyansh/messaging-app/client/src/app/messages/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { io, Socket } from 'socket.io-client';\n\n\ninterface Message {\n    senderId: string;\n    senderUsername: string,\n    content: string;\n    timestamp: string;\n}\n\ninterface Conversation {\n    id: string;\n    email: string;\n    username?: string;\n}\n\nexport default function MessagesPage() {\n    const [conversations, setConversations] = useState<Conversation[]>([]);\n    const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null);\n    const [messages, setMessages] = useState<Message[]>([]);\n    const [newMessage, setNewMessage] = useState('');\n    const [allUsers, setAllUsers] = useState<Conversation[]>([]);\n    const [showUserList, setShowUserList] = useState(false);\n    const [currentUserEmail, setCurrentUserEmail] = useState('');\n    const [currentUserId, setCurrentUserId] = useState('');\n    const [currentUsername, setCurrentUsername] = useState('');\n    const router = useRouter();\n    const messagesEndRef = useRef<HTMLDivElement>(null);\n    const prevMessageCountRef = useRef<number>(0);\n    const socketRef = useRef<Socket | null>(null);\n    const handleLogout = () => {\n        localStorage.removeItem('token');\n        router.push('/login');\n    };\n\n    // connect socket\n    useEffect(() => {\n        socketRef.current = io('http://localhost:6543');\n\n        const handleNewConversation = (newConvo: Conversation) => {\n            setConversations((prev) => {\n                const exists = prev.some((c) => c.id === newConvo.id);\n                if (exists) return prev;\n                return [newConvo, ...prev];\n            });\n        };\n\n        socketRef.current.on('newConversation', handleNewConversation);\n\n        return () => {\n            socketRef.current?.off('newConversation', handleNewConversation);\n            socketRef.current?.disconnect();\n        };\n\n    }, []);\n\n    useEffect(() => {\n        if (!socketRef.current) return;\n        const handleReceiveMessage = (message: Message) => {\n            if (\n                selectedConversation &&\n                (message.senderId === selectedConversation.id || message.senderId === currentUserId)\n            ) {\n                setMessages((prev) => [...prev, message]);\n            }\n        }\n\n        socketRef.current.on('receive_message', handleReceiveMessage);\n\n        return () => {\n            socketRef.current?.off('receive_message', handleReceiveMessage);\n        };\n    }, [selectedConversation]);\n\n    // autoscroll to most recent message\n    useEffect(() => {\n        if (messages.length > prevMessageCountRef.current) {\n            messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n        }\n        prevMessageCountRef.current = messages.length;\n    }, [messages]);\n\n    // labeling messages\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (!token) return;\n\n        const fetchMe = async () => {\n            const res = await fetch('http://localhost:6543/api/me', {\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                },\n            });\n            const data = await res.json();\n            setCurrentUserEmail(data.email);\n            setCurrentUserId(data.id);\n            setCurrentUsername(data.username);\n            socketRef.current?.emit('register', data.id);\n        };\n\n        fetchMe();\n    }, []);\n\n\n\n    // fetch possible new users to talk to\n    useEffect(() => {\n        // fetch users only once on mount\n        const token = localStorage.getItem('token');\n        if (!token) {\n            router.push('/login');\n            return;\n        }\n\n        const fetchUsers = async () => {\n            const res = await fetch('http://localhost:6543/api/users', {\n                headers: { Authorization: `Bearer ${token}` },\n            });\n            const data = await res.json();\n            setAllUsers(data.users);\n        };\n\n        fetchUsers();\n\n        // const interval = setInterval(fetchUsers, 10000);\n        // return () => clearInterval(interval);\n\n    }, []);\n\n    // fetch conversations when the page loads\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            router.push('/login');\n            return;\n        }\n\n        const fetchConversations = async () => {\n            const res = await fetch('http://localhost:6543/api/conversations', {\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                },\n            });\n            const data = await res.json();\n            setConversations(data.conversations);\n        };\n\n        fetchConversations(); // initial load\n        // const interval = setInterval(fetchConversations, 2000); // update every 2 seconds\n\n        // return () => clearInterval(interval);\n\n\n    }, []);\n\n    // fetch messages when a conversation is selected\n    useEffect(() => {\n        if (!selectedConversation) return;\n\n        const fetchMessages = async () => {\n            const res = await fetch(`http://localhost:6543/api/conversations/${selectedConversation.id}/messages`, {\n                headers: {\n                    Authorization: `Bearer ${localStorage.getItem('token')}`,\n                },\n            });\n\n            const data = await res.json();\n            setMessages(data.messages);\n        };\n\n        fetchMessages(); // fetch immediately when conversation is selected\n\n        // const interval = setInterval(fetchMessages, 2000);\n\n        // return () => clearInterval(interval);\n    }, [selectedConversation]);\n\n    // handle when user sends a new message in current conversation\n    const handleSendMessage = async () => {\n        if (newMessage.trim() && selectedConversation) {\n            // const res = await fetch(`http://localhost:6543/api/conversations/${selectedConversation?.id}/messages`, {\n            //     method: 'POST',\n            //     headers: {\n            //         'Content-Type': 'application/json',\n            //         'Authorization': `Bearer ${localStorage.getItem('token')}`,\n            //     },\n            //     body: JSON.stringify({ content: newMessage }),\n            // });\n\n            socketRef.current?.emit('send_message', {\n                senderId: currentUserId,\n                recipientId: selectedConversation.id,\n                content: newMessage,\n            });\n\n            setNewMessage('');\n        }\n    };\n\n    return (\n        <div className=\"flex min-h-screen bg-[#f1e9e6] text-[#23262a]\">\n            <div className=\"w-1/4 p-4 border-r\">\n                <div className=\"flex flex-col items-center\">\n                    <div className=\"flex justify-center space-x-4 mb-4\">\n                        <button\n                            className=\"bg-green-500 text-white border-2 border-green-600 py-1 px-3 rounded hover:bg-green-600\"\n                            onClick={() => setShowUserList(!showUserList)}\n                        >\n                            New Conversation\n                        </button>\n\n                        <button\n                            className=\"bg-red-500 border-2 border-red-600 text-white py-1 px-3 rounded hover:bg-red-600\"\n                            onClick={handleLogout}\n                        >\n                            Logout\n                        </button>\n                    </div>\n\n                    {showUserList && (\n                        <ul className=\"max-h-40 overflow-y-auto border-2 border-green-600 rounded p-2 mb-3 bg-[#f1e9e6] w-100\">\n                            {allUsers.map((user) => (\n                                <li\n                                    key={user.id}\n                                    onClick={() => {\n                                        setSelectedConversation(user);\n                                        setShowUserList(false);\n                                    }}\n                                    className=\"cursor-pointer text-black hover:bg-green-300 p-2 rounded\"\n                                >\n                                    {user.username ?? user.email}\n                                </li>\n                            ))}\n                        </ul>\n                    )}\n                </div>\n\n                <div className=\"flex flex-col items-center\">\n                    <h2 className=\"text-4xl font-semibold mb-4 justify-center\">Conversations</h2>\n                </div>\n                <ul className=\"text-2xl mb-4 h-180 overflow-y-auto border rounded p-2 bg-[#f1e9e6]\">\n                <div className=\"flex flex-col items-center\">\n                    {conversations.map((conversation) => (\n                        \n                        <li\n                            key={conversation.id}\n                            onClick={() => setSelectedConversation(conversation)}\n                            className=\"cursor-pointer hover:bg-gray-400 p-2 rounded justify-center\"\n                        >\n                            {conversation.username ?? conversation.email ?? 'Unnamed'}\n                        </li>\n                    ))}\n                    </div>\n                </ul>\n            </div>\n\n            <div className=\"flex-1 p-4\">\n                {selectedConversation ? (\n                    <>\n                        <h2 className=\"text-2xl font-semibold mb-4\">{selectedConversation.username ?? selectedConversation.email}</h2>\n                        <div className=\"space-y-4 h-[60vh] overflow-y-scroll border-b pb-4\">\n                            {messages.map((message, index) => (\n                                <div key={index} className=\"flex flex-col\">\n                                    <div className=\"font-semibold text-gray-600\">\n                                        {message.senderId === currentUserId ? 'You' : message.senderUsername}\n                                    </div>\n                                    <div>{message.content}</div>\n                                    <div className=\"text-sm text-gray-400\">{new Date(message.timestamp).toLocaleString('en-US', {\n                                        timeZone: 'America/Los_Angeles',\n                                        hour: '2-digit',\n                                        minute: '2-digit',\n                                        hour12: true,\n                                    })}</div>\n                                </div>\n                            ))}\n                            <div ref={messagesEndRef} />\n                        </div>\n                        <div className=\"mt-4\">\n                            <input\n                                type=\"text\"\n                                value={newMessage}\n                                onChange={(e) => setNewMessage(e.target.value)}\n                                className=\"w-full p-2 border rounded\"\n                                placeholder=\"Type a message...\"\n                            />\n                            <button\n                                onClick={handleSendMessage}\n                                className=\"w-full bg-blue-500 text-white py-2 mt-2 rounded hover:bg-blue-600\"\n                            >\n                                Send\n                            </button>\n                        </div>\n                    </>\n                ) : (\n                    <div className=\"text-center\">Select a conversation to view messages</div>\n                )}\n            </div>\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}