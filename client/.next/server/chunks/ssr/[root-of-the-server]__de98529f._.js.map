{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///Users/shreyansh/messaging-app/client/src/app/messages/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { io, Socket } from 'socket.io-client';\nimport { useRef } from 'react';\n\ninterface Message {\n    sender: string;\n    content: string;\n    timestamp: string;\n}\n\ninterface Conversation {\n    id: string;\n    email: string;\n}\n\nexport default function MessagesPage() {\n    const socketRef = useRef<Socket | null>(null);\n    const [conversations, setConversations] = useState<Conversation[]>([]);\n    const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null);\n    const [messages, setMessages] = useState<Message[]>([]);\n    const [newMessage, setNewMessage] = useState('');\n    const [allUsers, setAllUsers] = useState<Conversation[]>([]);\n    const [showUserList, setShowUserList] = useState(false);\n    const [currentUserEmail, setCurrentUserEmail] = useState('');\n    const router = useRouter();\n\n    // labeling messages\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (!token) return;\n\n        const fetchMe = async () => {\n            const res = await fetch('http://localhost:6543/api/me', {\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                },\n            });\n            const data = await res.json();\n            setCurrentUserEmail(data.email);\n\n            if (!socketRef.current) {\n                socketRef.current = io('http://localhost:6543');\n            }\n\n            socketRef.current.emit('register', data.id);\n\n            socketRef.current.on('receiveMessage', (message) => {\n                setMessages((prev) => [...prev, message]);\n            });\n        };\n\n        fetchMe();\n\n        return () => {\n            socketRef.current?.disconnect();\n        }\n    }, []);\n\n    // fetch possible new users to talk to\n    useEffect(() => {\n        // fetch users only once on mount\n        const token = localStorage.getItem('token');\n        if (!token) {\n            router.push('/login');\n            return;\n        }\n\n        const fetchUsers = async () => {\n            const res = await fetch('http://localhost:6543/api/users', {\n                headers: { Authorization: `Bearer ${token}` },\n            });\n            const data = await res.json();\n            setAllUsers(data.users);\n        };\n\n        fetchUsers();\n    }, []);\n\n    // fetch conversations when the page loads\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            router.push('/login');\n            return;\n        }\n\n        const fetchConversations = async () => {\n            const res = await fetch('http://localhost:6543/api/conversations', {\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                },\n            });\n            const data = await res.json();\n            setConversations(data.conversations);\n        };\n\n        fetchConversations(); // initial load\n        const interval = setInterval(fetchConversations, 2000); // update every 5 seconds\n\n        return () => clearInterval(interval);\n    }, []);\n\n    // fetch messages when a conversation is selected\n    useEffect(() => {\n        if (!selectedConversation) return;\n\n        const fetchMessages = async () => {\n            const res = await fetch(`http://localhost:6543/api/conversations/${selectedConversation.id}/messages`, {\n                headers: {\n                    Authorization: `Bearer ${localStorage.getItem('token')}`,\n                },\n            });\n\n            const data = await res.json();\n            setMessages(data.messages);\n        };\n\n        fetchMessages();\n        const interval = setInterval(fetchMessages, 2000); // fetch every 10 seconds\n\n        return () => clearInterval(interval);\n\n    }, [selectedConversation]);\n\n    // handle when user sends a new messages in current conversation\n    const handleSendMessage = async () => {\n        if (newMessage.trim()) {\n            const res = await fetch(`http://localhost:6543/api/conversations/${selectedConversation?.id}/messages`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`,\n                },\n                body: JSON.stringify({ content: newMessage }),\n            });\n\n            if (res.ok) {\n                const messageData = {\n                    sender: currentUserEmail,\n                    content: newMessage,\n                    timestamp: new Date().toISOString(),\n                };\n\n                // Update local UI immediately\n                setMessages((prevMessages) => [...prevMessages, messageData]);\n\n                // Emit message to recipient via socket\n                socketRef.current?.emit('sendMessage', {\n                    ...messageData,\n                    recipientId: selectedConversation?.id,\n                });\n\n                setNewMessage('');\n            }\n        }\n    };\n\n    return (\n        <div className=\"flex min-h-screen\">\n            <div className=\"w-1/4 p-4 border-r\">\n                <button\n                    className=\"mb-4 bg-green-500 text-white py-1 px-3 rounded hover:bg-green-600\"\n                    onClick={() => setShowUserList(!showUserList)}\n                >\n                    New Message\n                </button>\n\n                {showUserList && (\n                    <ul className=\"mb-4 max-h-40 overflow-y-auto border rounded p-2 bg-black\">\n                        {allUsers.map((user) => (\n                            <li\n                                key={user.id}\n                                onClick={() => {\n                                    setSelectedConversation(user);\n                                    setShowUserList(false);\n                                }}\n                                className=\"cursor-pointer hover:bg-gray-100 p-1 rounded\"\n                            >\n                                {user.email}\n                            </li>\n                        ))}\n                    </ul>\n                )}\n                <h2 className=\"text-2xl font-semibold mb-4\">Conversations</h2>\n                <ul className=\"mb-4 max-h-40 overflow-y-auto border rounded p-2 bg-black\">\n                    {conversations.map((conversation) => (\n                        <li\n                            key={conversation.id}\n                            onClick={() => setSelectedConversation(conversation)}\n                            className=\"cursor-pointer hover:bg-gray-200 p-2 rounded mb-2\"\n                        >\n                            {conversation.email ?? conversation.email ?? 'Unnamed'}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n\n            <div className=\"flex-1 p-4\">\n                {selectedConversation ? (\n                    <>\n                        <h2 className=\"text-2xl font-semibold mb-4\">{selectedConversation.email}</h2>\n                        <div className=\"space-y-4 h-[60vh] overflow-y-scroll border-b pb-4\">\n                            {messages.map((message, index) => (\n                                <div key={index} className=\"flex flex-col\">\n                                    <div className=\"font-semibold text-gray-600\">\n                                        {message.sender === currentUserEmail ? 'You' : message.sender}\n                                    </div>\n                                    <div>{message.content}</div>\n                                    <div className=\"text-sm text-gray-400\">{new Date(message.timestamp).toLocaleString()}</div>\n                                </div>\n                            ))}\n                        </div>\n                        <div className=\"mt-4\">\n                            <input\n                                type=\"text\"\n                                value={newMessage}\n                                onChange={(e) => setNewMessage(e.target.value)}\n                                className=\"w-full p-2 border rounded\"\n                                placeholder=\"Type a message...\"\n                            />\n                            <button\n                                onClick={handleSendMessage}\n                                className=\"w-full bg-blue-500 text-white py-2 mt-2 rounded hover:bg-blue-600\"\n                            >\n                                Send\n                            </button>\n                        </div>\n                    </>\n                ) : (\n                    <div className=\"text-center\">Select a conversation to view messages</div>\n                )}\n            </div>\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}